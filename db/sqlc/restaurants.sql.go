// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: restaurants.sql

package db

import (
	"context"
)

const createRestaurant = `-- name: CreateRestaurant :one
INSERT INTO restaurants (
  name) VALUES ( $1) RETURNING id, name
`

func (q *Queries) CreateRestaurant(ctx context.Context, name string) (Restaurant, error) {
	row := q.db.QueryRow(ctx, createRestaurant, name)
	var i Restaurant
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRestaurant = `-- name: GetRestaurant :one
SELECT id, name FROM restaurants WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRestaurant(ctx context.Context, id int64) (Restaurant, error) {
	row := q.db.QueryRow(ctx, getRestaurant, id)
	var i Restaurant
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listRestaurants = `-- name: ListRestaurants :many
SELECT id, name FROM restaurants LIMIT $1 OFFSET $2
`

type ListRestaurantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRestaurants(ctx context.Context, arg ListRestaurantsParams) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, listRestaurants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
