// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: places.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (
    name,
    description,
    opening_hours,
    closing_hours,
    rating,
    ticket_category,
    ticket_price,
    location_id,
    place_type_id,
    created_at,
    updated_at,
    cover_image_url,
    profile_image_url,
    resturant_branch_id,
    preference_match
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15
) RETURNING id
`

type CreatePlaceParams struct {
	Name              string         `json:"name"`
	Description       pgtype.Text    `json:"description"`
	OpeningHours      time.Time      `json:"opening_hours"`
	ClosingHours      time.Time      `json:"closing_hours"`
	Rating            pgtype.Numeric `json:"rating"`
	TicketCategory    int16          `json:"ticket_category"`
	TicketPrice       string         `json:"ticket_price"`
	LocationID        int64          `json:"location_id"`
	PlaceTypeID       int64          `json:"place_type_id"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	CoverImageUrl     string         `json:"cover_image_url"`
	ProfileImageUrl   string         `json:"profile_image_url"`
	ResturantBranchID int64          `json:"resturant_branch_id"`
	PreferenceMatch   []int64        `json:"preference_match"`
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPlace,
		arg.Name,
		arg.Description,
		arg.OpeningHours,
		arg.ClosingHours,
		arg.Rating,
		arg.TicketCategory,
		arg.TicketPrice,
		arg.LocationID,
		arg.PlaceTypeID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CoverImageUrl,
		arg.ProfileImageUrl,
		arg.ResturantBranchID,
		arg.PreferenceMatch,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPlace = `-- name: GetPlace :one
SELECT id, name, description, opening_hours, closing_hours, rating, ticket_category, ticket_price, location_id, place_type_id, created_at, updated_at, cover_image_url, profile_image_url, resturant_branch_id, preference_match FROM places WHERE id = $1
`

func (q *Queries) GetPlace(ctx context.Context, id int64) (Place, error) {
	row := q.db.QueryRow(ctx, getPlace, id)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OpeningHours,
		&i.ClosingHours,
		&i.Rating,
		&i.TicketCategory,
		&i.TicketPrice,
		&i.LocationID,
		&i.PlaceTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImageUrl,
		&i.ProfileImageUrl,
		&i.ResturantBranchID,
		&i.PreferenceMatch,
	)
	return i, err
}

const getPlaces = `-- name: GetPlaces :many
SELECT id, name, description, opening_hours, closing_hours, rating, ticket_category, ticket_price, location_id, place_type_id, created_at, updated_at, cover_image_url, profile_image_url, resturant_branch_id, preference_match FROM places
`

func (q *Queries) GetPlaces(ctx context.Context) ([]Place, error) {
	rows, err := q.db.Query(ctx, getPlaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OpeningHours,
			&i.ClosingHours,
			&i.Rating,
			&i.TicketCategory,
			&i.TicketPrice,
			&i.LocationID,
			&i.PlaceTypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CoverImageUrl,
			&i.ProfileImageUrl,
			&i.ResturantBranchID,
			&i.PreferenceMatch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
